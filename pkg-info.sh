#!/bin/bash
#
# pkg-info.sh ‚Äî package information in Debian/Ubuntu
#
# Copyright (C) 2025 –¢–≤–æ—ë –ò–º—è
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail
#set -x

SCRIPT_NAME=$(basename "$0")

print_usage() {
  cat <<EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $SCRIPT_NAME [—Ñ–ª–∞–≥] [–ø–∞—Ä–∞–º–µ—Ç—Ä]

–§–ª–∞–≥–∏:
  --group <—Å–µ–∫—Ü–∏—è>            –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏
  --group-list <—Å–µ–∫—Ü–∏—è>       –¢–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤ —Å–µ–∫—Ü–∏–∏
  --groups                    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
  --search <–ø–∞–∫–µ—Ç>            –ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
  --search-pretty <–ø–∞–∫–µ—Ç>     –ü–æ–∏—Å–∫ —Å fuzzy-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
  --files <–ø–∞–∫–µ—Ç>             –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞ (–ø–æ–∏—Å–∫ online)
  --rdepends <–ø–∞–∫–µ—Ç>          –û–±—Ä–∞—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
  --orphans                   –ü–æ–∏—Å–∫ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
  --orphans-full              –ü–æ–∏—Å–∫ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
  --data <N|YYYYMMDD>         –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –ø–æ –¥–∞—Ç–µ
  <–ø–∞–∫–µ—Ç>                     –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ (apt show)

–ü—Ä–∏–º–µ—Ä—ã:
  $SCRIPT_NAME --group xfce
  $SCRIPT_NAME --group-list editors
  $SCRIPT_NAME --data 10
  $SCRIPT_NAME --data 20250829
  $SCRIPT_NAME thunar
EOF
}

print_block() {
  local start_date="$1"
  local cmdline="$2"
  local install_line="$3"

  echo "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $start_date"
  echo "–ö–æ–º–∞–Ω–¥–∞: $cmdline"
  echo "–ü–∞–∫–µ—Ç—ã:"

  # –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
  awk -v line="$install_line" '
    function trim(s) {
      gsub(/^[ \t]+|[ \t]+$/, "", s);
      return s;
    }
    function split_pkgs(s, arr,   i, c, level, start, pos) {
      level = 0
      start = 1
      c = 0
      for (pos = 1; pos <= length(s); pos++) {
        ch = substr(s, pos, 1)
        if (ch == "(") level++
        else if (ch == ")") level--
        else if (ch == "," && level == 0) {
          c++
          arr[c] = trim(substr(s, start, pos - start))
          start = pos + 1
        }
      }
      c++
      arr[c] = trim(substr(s, start))
      return c
    }
    BEGIN {
      n = split_pkgs(line, pkgs)
      for (i = 1; i <= n; i++) {
        print "  - " pkgs[i]
      }
    }
  '
  echo "------------------------------------------"
}

# ---------- FUNCTIONS ----------


show_package_files_online_or_local() {
  local pkg="$1"

  if dpkg -s "$pkg" &>/dev/null; then
    echo "üìÇ –§–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞ '$pkg' (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ):"
    dpkg -L "$pkg"
  else
    echo "‚ö†Ô∏è  –ü–∞–∫–µ—Ç '$pkg' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å packages.debian.org..."

    local distro
    distro=$(lsb_release -sc 2>/dev/null || echo "stable")

    local arch
    arch=$(dpkg --print-architecture 2>/dev/null || echo "amd64")

    local url="https://packages.debian.org/${distro}/${arch}/${pkg}/filelist"

    if curl --head --silent --fail "$url" >/dev/null; then
      echo "üìÇ –§–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞ '$pkg' (–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Debian):"
      curl -s "$url" | sed -n '/<pre>/,/<\/pre>/p' | sed 's/<[^>]*>//g'
    else
      echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–∞–π—Ç–∞ Debian."
    fi
  fi
}

extract_packages_by_group() {
  local group="$1"
  local with_desc="$2"
  local group_lc=$(echo "$group" | tr '[:upper:]' '[:lower:]')

  awk -v grp="$group" -v grplc="$group_lc" -v with_desc="$with_desc" '
  BEGIN { RS=""; FS="\n" }
  {
    pkg=""; desc=""; section=""; tags=""; homepage=""
    for (i=1; i<=NF; i++) {
      if ($i ~ /^Package: /) pkg = substr($i, 10)
      else if ($i ~ /^Section: /) section = substr($i, 10)
      else if ($i ~ /^Description: /) desc = substr($i, 14)
      else if ($i ~ /^Homepage: /) homepage = substr($i, 11)
      else if ($i ~ /^Tag: /) {
        tags = substr($i, 6)
        for (j=i+1; j<=NF; j++) {
          if ($j ~ /^[ \t]/ || $j ~ /^[^:]+::/) tags = tags " " $j
          else break
        }
      }
    }

    # Lowercase fields for case-insensitive search
    desc_lc = tolower(desc)
    homepage_lc = tolower(homepage)

    if (section == grp || tags ~ ("suite::" grp) || desc_lc ~ grplc || homepage_lc ~ grplc) {
      if (with_desc == "yes")
        print pkg ": " desc
      else
        print pkg
    }
  }
  ' /var/lib/apt/lists/*Packages 2>/dev/null
}

show_package_info_status() {
  local pkg="$1"
  local status=$(dpkg -s "$pkg" 2>/dev/null | grep '^Status:')
  if [[ "$status" == "Status: install ok installed" ]]; then
    echo "$status"
  else
    echo "Status: not installed"
  fi
}

show_package_info() {
  local pkg="$1"
  if apt-cache show "$pkg" &>/dev/null; then
    apt show "$pkg"
  else
    echo "‚ùå –ü–∞–∫–µ—Ç '$pkg' –Ω–µ –Ω–∞–π–¥–µ–Ω"
  fi
}

# –ü–∞–∫–µ—Ç—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (grep –ø–æ –∏–º–µ–Ω–∏)
group_like() {
  local pattern="$1"
  apt-cache dumpavail | awk -v pat="$pattern" '
    $1=="Package:" {pkg=$2}
    $1=="Section:" {
      if ($0 ~ pat) print pkg
    }
  '
}

show_all_groups() {
  apt-cache dumpavail | grep '^Section:' | cut -d' ' -f2 | sort -u
}

search_packages() {
  local name="$1"
  apt-cache search "$name"
}

show_package_files_online() {
  local pkg="$1"
  local arch=$(dpkg --print-architecture)
  local codename=$(lsb_release -sc)
  local url="https://packages.debian.org/$codename/$arch/$pkg/filelist"

  echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å $url ..."
  curl -s "$url" | grep -A100 "<ul>" | grep '<li>' | sed -E 's/<[^>]+>//g' || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫"
}

show_rdepends() {
  local pkg="$1"
  apt-cache rdepends "$pkg"
}


find_orphans_lite() {
  echo "üîç –ü–æ–∏—Å–∫ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤..."

  if command -v deborphan >/dev/null 2>&1; then
    echo "‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è deborphan:"
    deborphan
    return
  fi

  if command -v debfoster >/dev/null 2>&1; then
    echo "‚ö†Ô∏è deborphan –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è debfoster..."
    orphans_debfoster
    return
  fi

  # –ù–∏ deborphan, –Ω–∏ debfoster ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫
  echo "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã deborphan –∏–ª–∏ debfoster."
  echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–∏—Ä–æ—Ç:"
  echo "  sudo apt install deborphan"
  echo "  sudo apt install debfoster"
  echo ""
  echo "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π):"
  
  # –ú–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±: –∏—â–µ–º –ø–∞–∫–µ—Ç—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –¥—Ä—É–≥–∏—Ö
#  comm -23 \
#    <(apt-mark showauto | sort) \
#    <(apt-mark showmanual | sort) |
#  while read -r pkg; do
#    if ! apt-cache rdepends --installed "$pkg" | grep -qE '^\s{2,}\w'; then
#      echo "$pkg"
#    fi
#  done
  apt autoremove --dry-run
}


find_orphans_full() {
  set +e +u +o pipefail
  echo "üîç –ü–æ–∏—Å–∫ —Å–∏—Ä–æ—Ç (auto‚Äë–ø–∞–∫–µ—Ç—ã, –Ω–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –¥—Ä—É–≥–∏–º–∏)"
  echo "   —Å —É—á—ë—Ç–æ–º Depends, Recommends, Suggests..."
  echo "   –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."
   
  echo -e "\n1. –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ –∏ –∞–≤—Ç–æ‚Äë–ø–∞–∫–µ—Ç—ã‚Ä¶"
  mapfile -t manual < <(apt-mark showmanual)
  mapfile -t auto < <(apt-mark showauto)
  echo "   Manual: ${#manual[@]}, Auto: ${#auto[@]}"
   
  echo -e "\n2. –°–±–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Depends, Recommends, Suggests)‚Ä¶"
  mapfile -t deps < <(
    dpkg-query -W -f='${Package}\t${Depends}\t${Recommends}\t${Suggests}\n' | \
    while IFS=$'\t' read -r pkg depends recs suggs; do
      for field in "$depends" "$recs" "$suggs"; do
        IFS=',' read -ra arr <<< "$field"
        for dep in "${arr[@]}"; do
          dep=$(echo "$dep" | sed -E 's/\s*\(.*\)//g' | awk -F'|' '{print $1}' | xargs) #'
          [[ -n "$dep" ]] && echo -e "$pkg\t$dep"
        done
      done
    done
  )
  total=${#deps[@]}
  echo "   –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: $total"
   
  echo -e "\n3. –°—Ç—Ä–æ–∏–º reachable‚Äë–ø–∞–∫–µ—Ç—ã –æ—Ç manual‚Ä¶"
  reachable=("${manual[@]}")
  changed=1
  while [[ $changed -eq 1 ]]; do
    changed=0
    count=0
    for depline in "${deps[@]}"; do
      ((count++))
      percent=$((count * 100 / total))
      printf "\rüöÄ –û–±—Ö–æ–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π... %3d%% (%d/%d)" "$percent" "$count" "$total"
   
      pkg="${depline%%$'\t'*}"
      dep="${depline#*$'\t'}"
   
      if printf '%s\n' "${reachable[@]}" | grep -qx "$pkg"; then
        if ! printf '%s\n' "${reachable[@]}" | grep -qx "$dep"; then
          reachable+=("$dep")
          changed=1
        fi
      fi
    done
  done
  echo -e "\n‚úÖ –û–±—Ö–æ–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω."
  echo "   Reachable –ø–∞–∫–µ—Ç–æ–≤: ${#reachable[@]}"
   
  echo -e "\n4. üßπ –ü–æ–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö orphan-–ø–∞–∫–µ—Ç–æ–≤ (auto, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö)‚Ä¶"
   
  system_patterns=(
    '^linux-.*'
    '^systemd.*'
    '^initramfs.*'
    '^grub.*'
    '^libc6.*'
    '^libstdc.*'
    '^gcc.*'
    '^dpkg.*'
    '^apt.*'
    '^perl.*'
    '^bash$'
    '^dash$'
    '^coreutils$'
    '^debconf$'
    '^login$'
    '^passwd$'
    '^sudo$'
    '^util-linux$'
    '^hostname$'
    '^netbase$'
    '^base-files$'
    '^base-passwd$'
  )
   
  is_system_package() {
    local pkg="$1"
    for pattern in "${system_patterns[@]}"; do
      if [[ $pkg =~ $pattern ]]; then
        return 0
      fi
    done
    return 1
  }
   
  declare -a orphan_safe
  declare -A holds
  count=0
  for a in "${auto[@]}"; do
    if ! printf '%s\n' "${reachable[@]}" | grep -qx "$a"; then
      if ! is_system_package "$a"; then
        if apt-mark showhold | grep -xq "$a"; then
          holds["$a"]=1
          echo "$a [hold]"
        else
          echo "$a"
        fi
        orphan_safe+=("$a")
        ((count++))
      fi
    fi
  done
   
  echo -e "\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Ä–æ—Ç: $count"
   
  echo -e "\n5. üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ orphan-–ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π (–≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)‚Ä¶"

  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Å –≤–µ—Ä—Å–∏—è–º–∏
  mapfile -t installed_versions < <(dpkg-query -W -f='${Package}\t${Version}\n')

  declare -A version_map
  for line in "${installed_versions[@]}"; do
    pkg="${line%%$'\t'*}"
    ver="${line#*$'\t'}"
    version_map["$pkg"]="$ver"
  done

  declare -a version_duplicates=()

  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∞–∫–µ—Ç–∞ –±–µ–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
  get_base_name() {
    local pkg="$1"
    # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (–ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è)
    pkg="${pkg%%:*}"
    # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ—Ñ–∏—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    if [[ "$pkg" =~ ^(.+)-([0-9]+|dev|doc|dbg|common|tools|utils)$ ]]; then
      echo "${BASH_REMATCH[1]}"
    else
      echo "$pkg"
    fi
  }

  for orphan in "${orphan_safe[@]}"; do
    orphan_ver="${version_map[$orphan]:-}"
    [[ -z "$orphan_ver" ]] && continue

    if is_system_package "$orphan"; then
      continue
    fi

    orphan_base=$(get_base_name "$orphan")

    for pkg in "${!version_map[@]}"; do
      [[ "$pkg" == "$orphan" ]] && continue

      if is_system_package "$pkg"; then
        continue
      fi

      pkg_ver="${version_map[$pkg]}"
      pkg_base=$(get_base_name "$pkg")

      if [[ "$pkg_base" == "$orphan_base" && "$pkg_ver" != "$orphan_ver" ]]; then
        echo "‚ö†Ô∏è  $orphan ($orphan_ver) ‚Üí $pkg ($pkg_ver)"
        version_duplicates+=("$orphan ‚Üí $pkg")
      fi
    done
  done

  if [[ ${#version_duplicates[@]} -eq 0 ]]; then
    echo "‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
  else
    echo -e "\nüì¶ –í–æ–∑–º–æ–∂–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏:"
    printf ' - %s\n' "${version_duplicates[@]}"
  fi

  echo "[DEBUG] –ë–ª–æ–∫ 5 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω"

  set -euo pipefail
}


# –ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ (N –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
show_recent_installs() {
  local count="${1:-5}"

  echo "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ $count —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–æ–≤:"
  echo "------------------------------------------"

  local logs=$(ls -t /var/log/apt/history.log* 2>/dev/null || true)
  if [[ -z "$logs" ]]; then
    echo "–ù–µ—Ç –∂—É—Ä–Ω–∞–ª–æ–≤ apt history –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    return
  fi

  # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  zgrep -h -E '^(Start-Date|Commandline|Install:)' $logs | \
    awk '
      /^Start-Date:/ {
        if (block) print "";
        block=1;
        print "üìÖ " $0;
      }
      /^Commandline:/ { print "üíª " $0; }
      /^Install:/ { print "üì¶ " $0; }
    ' | awk -v RS= -v ORS="\n\n" '1' | head -n $(($count * 8))
}

show_installs_full_by_date() {
  local target_date="$1"
  echo "üìÖ –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∑–∞ –¥–∞—Ç—É: $target_date"
  echo "------------------------------------------"

  local in_block=0
  local current_date=""
  local install_buffer=""
  local print_block=0

  zgrep -h -E '^(Start-Date|Commandline|Install):' /var/log/apt/history.log* | while IFS= read -r line; do
    if [[ "$line" =~ ^Start-Date:\ ([0-9]{4})-([0-9]{2})-([0-9]{2}) ]]; then
      # –ù–æ–≤—ã–π –±–ª–æ–∫ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –±—ã–ª
      if [[ $print_block -eq 1 && -n "$install_buffer" ]]; then
        echo "Install: $install_buffer"
        echo
      fi

      # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
      current_date="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}"
      if [[ "$current_date" == "$target_date" ]]; then
        echo "$line"
        print_block=1
      else
        print_block=0
      fi

      install_buffer=""
      continue
    fi

    if [[ $print_block -eq 1 ]]; then
      if [[ "$line" =~ ^Commandline: ]]; then
        echo "$line"
      elif [[ "$line" =~ ^Install:\ (.*) ]]; then
        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º
        local installs="${BASH_REMATCH[1]}"
        install_buffer+="${install_buffer:+, }$installs"
      fi
    fi
  done

  # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –ø–æ–ø–∞–ª
  if [[ $print_block -eq 1 && -n "$install_buffer" ]]; then
    echo "Install: $install_buffer"
  fi
}

show_installed_names_by_date() {
  local target_date="$1"
  echo "üì¶ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø–∞–∫–µ—Ç–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞ –¥–∞—Ç—É: $target_date"
  echo "------------------------------------------"

  zgrep -h -E '^(Start-Date|Install:)' /var/log/apt/history.log* | awk -v date="$target_date" '
    BEGIN { capture = 0 }
    /^Start-Date:/ {
      match($0, /Start-Date: ([0-9]{4}-[0-9]{2}-[0-9]{2})/, m)
      capture = (m[1] == date)
    }
    /^Install:/ && capture {
      line = $0
      sub(/^Install: /, "", line)

      n = split(line, entries, /, ?/)
      for (i = 1; i <= n; i++) {
        pkg = entries[i]
        gsub(/^ +| +$/, "", pkg)  # trim
        match(pkg, /^([^:]+):/, m)
        if (m[1] != "")
          print m[1]
      }
    }
  ' | sort -u
}

show_installs_by_date() {
  local raw_date="$1"
  local formatted_date

  if [[ "$raw_date" =~ ^[0-9]{8}$ ]]; then
    formatted_date="$(date -d "${raw_date:0:4}-${raw_date:4:2}-${raw_date:6:2}" +%Y-%m-%d 2>/dev/null)"
  elif [[ "$raw_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    formatted_date="$raw_date"
  else
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: $raw_date"
    echo "   –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD –∏–ª–∏ YYYYMMDD"
    return 1
  fi

  echo "üìÖ –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É: $formatted_date"
  echo "------------------------------------------"

  local logs=$(ls -t /var/log/apt/history.log* 2>/dev/null || true)
  if [[ -z "$logs" ]]; then
    echo "–ù–µ—Ç –∂—É—Ä–Ω–∞–ª–æ–≤ apt history –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    return
  fi

  zgrep -h -E '^(Start-Date|Install:)' $logs | \
  awk -v date="$formatted_date" '
    function trim(s) {
      gsub(/^[ \t]+|[ \t]+$/, "", s)
      return s
    }
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ install –ø–æ –∑–∞–ø—è—Ç—ã–º –≤–Ω–µ —Å–∫–æ–±–æ–∫
    function split_pkgs(s, arr,   i, c, level, start, pos) {
      level = 0
      start = 1
      c = 0
      for (pos = 1; pos <= length(s); pos++) {
        ch = substr(s, pos, 1)
        if (ch == "(") level++
        else if (ch == ")") level--
        else if (ch == "," && level == 0) {
          c++
          arr[c] = trim(substr(s, start, pos - start))
          start = pos + 1
        }
      }
      c++
      arr[c] = trim(substr(s, start))
      return c
    }

    /^Start-Date:/ {
      current_date = $2
      capture = (current_date == date) ? 1 : 0
    }
    capture && /^Install:/ {
      sub(/^Install: /, "")
      n = split_pkgs($0, pkgs)
      for (i = 1; i <= n; i++) {
        print pkgs[i]
      }
    }
  ' | sort -u
}



# ---------- MAIN ----------

CMD="${1:-}"
ARG="${2:-}"


case "$CMD" in
  --help|-h|"")
    print_usage
    ;;
  --groups)
    show_all_groups
    ;;
  --group)
    if [ -z "$ARG" ]; then show_usage; fi
    echo "üì¶ –ü–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ suite '$ARG' —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏:"
    extract_packages_by_group "$ARG" yes
    exit 0
    ;;
  --group-list)
    if [ -z "$ARG" ]; then show_usage; fi
    echo "üì¶ –ü–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ suite '$ARG':"
    extract_packages_by_group "$ARG" no |sort
    exit 0
    ;;
  --files)
    if [ -z "$ARG" ]; then
      echo "‚ö†Ô∏è  –£–∫–∞–∂–∏ –∏–º—è –ø–∞–∫–µ—Ç–∞."
      exit 1
    fi
    show_package_files_online_or_local "$ARG"
    ;;
  --rdepends)
    show_rdepends "$ARG"
    ;;
  --orphans)
    find_orphans_lite
    ;;
  --orphans-full)
    find_orphans_full
    ;;
  --data)
    if [[ "$ARG" =~ ^[0-9]+$ ]]; then
        show_recent_installs "$ARG"
    else
        show_installs_by_date "$ARG"
    fi
    ;;
  --data-full)
    DATE_PARAM="$2"
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–π –¥–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 20240806 ‚Üí 2024-08-06)
    if [[ "$DATE_PARAM" =~ ^([0-9]{4})([0-9]{2})([0-9]{2})$ ]]; then
      DATE_PARAM="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}"
    fi
    show_installs_full_by_date "$DATE_PARAM"
    ;;
  --data-list)
    shift
    show_installed_names_by_date "$1"
    ;;
  *)
    if [[ -n "$CMD" ]]; then
      show_package_info_status "$CMD"
      show_package_info "$CMD"
    else
      print_usage
    fi
    ;;
esac
